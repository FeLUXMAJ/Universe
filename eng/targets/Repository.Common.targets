<Project>
  <PropertyGroup>
    <SubmoduleRoot Condition=" ! $([System.IO.Path]::IsPathRooted($(SubmoduleRoot)))">$(MSBuildProjectDirectory)\$(SubmoduleRoot)</SubmoduleRoot>
    <SubmoduleRoot>$([MSBuild]::NormalizeDirectory($(SubmoduleRoot)))</SubmoduleRoot>

    <BuildScript Condition="'$(OS)'!='Windows_NT'">$(SubmoduleRoot)build.sh</BuildScript>
    <BuildScript Condition="'$(OS)'=='Windows_NT'">$(SubmoduleRoot)build.cmd</BuildScript>
    <BuildArgs>$(BuildArgs) /clp:NoSummary</BuildArgs>
    <BuildArgs>$(BuildArgs) /p:GenerateFullPaths=true</BuildArgs>
    <BuildArgs Condition="'$(RestorePackagesPath)' != ''">$(BuildArgs) /p:RestorePackagesPath=$(RestorePackagesPath)</BuildArgs>

    <CoreBuildDependsOn>
      GetTargetPath;
    </CoreBuildDependsOn>

    <CoreBuildDependsOn Condition=" '$(DesignTimeBuild)' != 'true' ">
      $(CoreBuildDependsOn);
      ResolveReferences;
      GeneratePropsFiles;
      Compile;
    </CoreBuildDependsOn>

    <CompileDependsOn>
      ResolveReferences;
      ResolveArtifacts;
      GeneratePropsFiles;
      CoreCompile;
    </CompileDependsOn>

    <CoreCleanDependsOn>
      CleanRepo;
    </CoreCleanDependsOn>

    <ResolveReferencesDependsOn>
      BeforeResolveReferences;
      AssignProjectConfiguration;
      ResolveProjectReferences;
      FindInvalidProjectReferences;
      ResolveArtifactReferences;
      AfterResolveReferences
    </ResolveReferencesDependsOn>

    <GetTargetPathDependsOn>
      ResolveArtifacts;
    </GetTargetPathDependsOn>

    <GeneratedPackageVersionPropsPath>$(IntermediateOutputPath)dependencies.g.props</GeneratedPackageVersionPropsPath>
    <GeneratedRestoreSourcePropsPath>$(IntermediateOutputPath)sources.g.props</GeneratedRestoreSourcePropsPath>
  </PropertyGroup>

  <UsingTask TaskName="KoreBuild.Tasks.GeneratePackageVersionPropsFile" AssemblyFile="$(KoreBuildTasksDll)" />

  <Target Name="GeneratePropsFiles" DependsOnTargets="ResolveReferences">
    <ItemGroup>
      <_RestoreFileReferences Include="%(ArtifactReference.PackageId)" Condition=" '%(ArtifactReference.ArtifactType)' == 'NuGetPackage' ">
        <Version>%(ArtifactReference.Version)</Version>
        <TargetFramework>%(ArtifactReference.VariableTargetFramework)</TargetFramework>
        <VariableName>%(ArtifactReference.VariableName)</VariableName>
      </_RestoreFileReferences>

      <_RestoreSources Include="%(ArtifactReference.RootDir)%(ArtifactReference.Directory)" Condition=" '%(ArtifactReference.ArtifactType)' == 'NuGetPackage' " />
    </ItemGroup>

    <GeneratePackageVersionPropsFile
      Packages="@(_RestoreFileReferences);@(ExternalDependency)"
      OutputPath="$(GeneratedPackageVersionPropsPath)" />

    <RepoTasks.GenerateRestoreSourcesPropsFile
      Sources="@(_RestoreSources);$(RestoreSources)"
      OutputPath="$(GeneratedRestoreSourcePropsPath)" />
  </Target>

  <PropertyGroup>
    <SourceLockFile>$(RepositoryRoot)korebuild-lock.txt</SourceLockFile>
    <RepoLockFile>$(SubmoduleRoot)korebuild-lock.txt</RepoLockFile>
    <BackupRepoLockFile>$(IntermediateOutputPath)korebuild-lock.txt</BackupRepoLockFile>
  </PropertyGroup>

  <Target Name="_UpdateRepoLockFile">
    <!-- Copy Korebuild lock file to individual repos to align version if the repo doesn't already have one -->
    <Message Text="Copying KoreBuild lockfile from Universe to repository $(BuildRepositoryRoot)"/>
    <Move SourceFiles="$(RepoLockFile)" DestinationFiles="$(BackupRepoLockFile)" Condition="Exists($(RepoLockFile))" />
    <Copy SourceFiles="$(SourceLockFile)" DestinationFiles="$(RepoLockFile)" />
  </Target>

  <Target Name="_RestoreOriginalRepoLockFile">
    <!-- Restore original Korebuild lock file -->
    <Delete Files="$(RepoLockFile)" ContinueOnError="true" />
    <Move SourceFiles="$(BackupRepoLockFile)" DestinationFiles="$(RepoLockFile)" Condition="Exists($(BackupRepoLockFile))"  />
  </Target>

  <Target Name="CoreCompile" DependsOnTargets="_UpdateRepoLockFile">
    <PropertyGroup>
      <BuildArgs>$(BuildArgs) /t:Build</BuildArgs>
      <BuildArgs>$(BuildArgs) /p:SkipTests=true</BuildArgs>
      <!-- Should reduce allowable package feeds to only nuget.org. -->
      <BuildArgs Condition="'$(ProduceRepoBinLog)' == 'true'">$(BuildArgs) /bl:$(LogOutputDir)$(MSBuildProjectName).build.binlog</BuildArgs>
      <BuildArgs>$(BuildArgs) /p:AspNetUniverseBuildOffline=true</BuildArgs>
      <BuildArgs>$(BuildArgs) /p:RestoreNoCache=true</BuildArgs>
      <BuildArgs>$(BuildArgs) /p:DotNetRestoreSourcePropsPath=$(GeneratedRestoreSourcePropsPath)</BuildArgs>
      <BuildArgs>$(BuildArgs) /p:DotNetPackageVersionPropsPath=$(GeneratedPackageVersionPropsPath)</BuildArgs>
      <BuildArgs>$(BuildArgs) '/p:DotNetAssetRootAccessTokenSuffix=$(DotNetAssetRootAccessTokenSuffix)'</BuildArgs>
      <BuildArgs>$(BuildArgs) '/p:DotNetAssetRootUrl=$(DotNetAssetRootUrl)'</BuildArgs>
      <BuildArgs>$(BuildArgs) /p:BuildNumber=$(BuildNumber)</BuildArgs>
      <BuildArgs>$(BuildArgs) /p:Configuration=$(Configuration)</BuildArgs>
      <BuildArgs>$(BuildArgs) /p:IsFinalBuild=$(IsFinalBuild)</BuildArgs>
      <BuildArgs>$(BuildArgs) /noconsolelogger '/l:RepoTasks.FlowLogger,$(_RepoTaskAssembly);Summary;FlowId=$(MSBuildProjectName)'</BuildArgs>
    </PropertyGroup>

    <Message Text="Compiling $(MSBuildProjectName)" Importance="High" />

    <Exec Command="$(BuildScript) $(BuildArgs)"
          WorkingDirectory="$(SubmoduleRoot)"
          EnvironmentVariables="NUGET_PACKAGES=$(RestorePackagesPath)"
          IgnoreExitCode="true"
          ContinueOnError="WarnAndContinue">
      <Output TaskParameter="ExitCode" PropertyName="BuildExitCode" />
    </Exec>

    <CallTarget Targets="_RestoreOriginalRepoLockFile" />

    <!-- Fail if build.cmd didn't exit code 0 or process failed to start. -->
    <Error Text="Building $(MSBuildProjectName) failed: $(_BuildScriptToExecute) exited code $(BuildExitCode)" Condition=" '$(BuildExitCode)' != '0' " />

    <ItemGroup>
      <_CompileOutputs Include="$(SubmoduleRoot)artifacts\**\*" />
    </ItemGroup>

    <!-- TODO: consider writing directly to output path instead of copying. There were problems with trailing slashes :( -->
    <Copy SourceFiles="@(_CompileOutputs)" DestinationFiles="$(OutputPath)%(RecursiveDir)%(FileName)%(Extension)" />

    <Copy SourceFiles="@(_CompileOutputs)" DestinationFiles="$(ArtifactsDir)%(RecursiveDir)%(FileName)%(Extension)" />

    <Message Text="$(MSBuildProjectName) -> %(Artifact.FullPath)" Condition="'%(Artifact.Identity)' != ''" Importance="High" />

    <!-- Clean the local nuget cache -->
    <RemoveDir Directories="$(RestorePackagesPath)\%(Artifact.PackageId)\%(Artifact.Version)\" Condition="'%(Artifact.ArtifactType)' == 'NuGetPackage'" />
  </Target>

  <Target Name="CleanRepo">
    <Error Text="KoreBuildProjectFullPath is not defined" Condition="'$(KoreBuildProjectFullPath)' == ''" />
    <MSBuild Projects="$(KoreBuildProjectFullPath)"
             Targets="Clean"
             Properties="RepositoryRoot=$(SubmoduleRoot)" />
  </Target>

  <Target Name="ResolveArtifacts">
    <Error Text="KoreBuildProjectFullPath is not defined" Condition="'$(KoreBuildProjectFullPath)' == ''" />
    <MSBuild Projects="$(KoreBuildProjectFullPath)"
             Targets="GetArtifactInfo"
             Properties="RepositoryRoot=$(SubmoduleRoot);ArtifactsDir=$(OutputPath);Configuration=$(Configuration);BuildNumber=$(BuildNumber);IsFinalBuild=$(IsFinalBuild);DesignTimeBuild=true">
      <Output TaskParameter="TargetOutputs" ItemName="Artifact" />
    </MSBuild>
  </Target>

</Project>
